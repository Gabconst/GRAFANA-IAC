---
- name: Setup completo de servidor com Minikube + NGINX + K8s + ArgoCD
  hosts: grafana-servers
  become: true

  vars:
    docker_packages:
      - docker.io
    ansible_ssh_common_args: '-o ServerAliveInterval=30 -o ServerAliveCountMax=120'

  tasks:

    ####### SISTEMA & DEPENDÊNCIAS ########
    - name: Atualiza cache do APT e faz upgrade
      apt:
        update_cache: yes
        upgrade: dist

    - name: Instala dependências básicas
      apt:
        name:
          - curl
          - wget
          - git
          - apt-transport-https
          - ca-certificates
          - software-properties-common
          - python3-pip
          - python3-venv
        state: present
        update_cache: yes

    ####### DOCKER ########
    - name: Instala Docker
      apt:
        name: "{{ docker_packages }}"
        state: present
        update_cache: yes

    - name: Garante que o grupo docker existe
      group:
        name: docker
        state: present

    - name: Adiciona usuário ubuntu ao grupo docker
      user:
        name: ubuntu
        groups: docker
        append: yes

    - name: Reinicia o serviço Docker
      systemd:
        name: docker
        state: restarted
        enabled: true

    ####### MINIKUBE ########
    - name: Baixa binário do Minikube
      get_url:
        url: "https://github.com/kubernetes/minikube/releases/latest/download/minikube-linux-amd64"
        dest: /tmp/minikube-linux-amd64
        mode: '0755'

    - name: Move binário para /usr/local/bin
      command: mv /tmp/minikube-linux-amd64 /usr/local/bin/minikube
      args:
        creates: /usr/local/bin/minikube

    - name: Garante permissão de execução no Minikube
      file:
        path: /usr/local/bin/minikube
        mode: '0755'
        owner: root
        group: root

    - name: Cria alias kubectl no .bashrc do usuário ubuntu
      become_user: ubuntu
      lineinfile:
        path: /home/ubuntu/.bashrc
        line: 'alias kubectl="minikube kubectl --"'
        insertafter: EOF

    - name: Verifica se Minikube está ativo
      become_user: ubuntu
      shell: 'minikube status --format={{"{{.Host}}"}}'
      register: minikube_status
      ignore_errors: yes

    - name: Inicia cluster Minikube
      become_user: ubuntu
      environment:
        DOCKER_HOST: unix:///var/run/docker.sock
      shell: |
        newgrp docker <<EONG
        minikube start --driver=docker --force
        EONG
      args:
        chdir: /home/ubuntu
      register: minikube_start
      timeout: 600
      changed_when: "'Done!' in minikube_start.stdout or 'Running' in minikube_start.stdout"

    ####### PYTHON + K8S ########
    - name: Instala biblioteca kubernetes do Python
      pip:
        name: kubernetes
        executable: pip3
        extra_args: --break-system-packages

    ####### NGINX ########
    - name: Instala NGINX
      apt:
        name: nginx
        state: present
        update_cache: yes

    - name: Copia arquivo nginx.conf
      copy:
        src: "{{ playbook_dir }}/files/k8s/nginx.conf"
        dest: /etc/nginx/nginx.conf
        owner: root
        group: root
        mode: '0644'
      notify: Reinicia NGINX

    ####### KUBERNETES MANIFESTS ########
    - name: Cria pasta /home/ubuntu/k8s na VM
      file:
        path: /home/ubuntu/k8s
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    - name: Copia todos os manifests do repositório (incluindo ArgoCD e RBAC) para a VM
      copy:
        src: "{{ playbook_dir }}/files/k8s/"
        dest: /home/ubuntu/k8s/
        owner: ubuntu
        group: ubuntu
        mode: '0644'
        remote_src: no
      become_user: ubuntu

    - name: Aplica manifests do Kubernetes (aplicação e ArgoCD)
      become_user: ubuntu
      shell: |
        echo "=== Aplicando manifests do Kubernetes ==="

        # Aplica primeiro os manifests da aplicação
        for f in /home/ubuntu/k8s/deployment.yaml /home/ubuntu/k8s/service.yaml /home/ubuntu/k8s/ingress.yaml; do
          if [ -f "$f" ]; then
            echo "-> Aplicando $f"
            minikube kubectl -- apply -f "$f" -n default
          fi
        done

        # Depois aplica os manifests do ArgoCD e RBAC
        for f in \
          /home/ubuntu/k8s/argocd-serviceaccount.yaml \
          /home/ubuntu/k8s/argocd-role.yaml \
          /home/ubuntu/k8s/argocd-rolebinding.yaml \
          /home/ubuntu/k8s/argocd.yaml; do
          if [ -f "$f" ]; then
            echo "-> Aplicando $f"
            minikube kubectl -- apply -f "$f" -n default
          fi
        done
      args:
        executable: /bin/bash

    ####### STATUS ########
    - name: Verifica status dos pods
      become_user: ubuntu
      shell: |
        echo "=== Verificando status dos pods no namespace default ==="
        minikube kubectl -- get pods -n default || echo "Namespace default ainda não disponível"
      register: pods_status
      ignore_errors: yes

    - debug:
        msg: "{{ pods_status.stdout_lines | default(['Sem saída do comando']) }}"

  handlers:
    - name: Reinicia NGINX
      service:
        name: nginx
        state: restarted
        enabled: yes
